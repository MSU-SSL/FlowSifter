#include "http_matcher.h"

#include <stdio.h>

namespace binpac
{

  int match_events = 0;

void printData(const char * dataBegin, const char * dataEnd)
{
    const char * p = dataBegin;
    while(p < dataEnd)
    {
        printf("%c", *p);
        p++;
    }
}

int matchHTTPMethod(FastParser * parser, const char * dataBegin, const char * dataEnd, bool isFinished)
{
  match_events++;
  //    printf("matchHTTPMethod: ");
  //    printData(dataBegin, dataEnd);
  //    printf("\n");

    /*    
    HTTPAnalyzer * analyzer = (HTTPAnalyzer *)parser->getParam();
    
    if(seqMatch->count == 0)
    {
        analyzer->incrementalMatch();
        analyzer->performCSAlgo();
    }
    else
    {
    }
    
    analyzer->resetState();
    
    analyzer->methodField.dataBegin = (UINT8_T *)dataBegin;
    analyzer->methodField.dataEnd = (UINT8_T *)dataEnd;
    analyzer->methodField.parsingState = INPROCESS;
    
    if(isFinished == true)
    {
        analyzer->methodField.parsingState = FINISHED;
    }
    
    analyzer->matchSimpleFieldString(&(analyzer->methodField), analyzer->methodStringMatcher);
    analyzer->matchSimpleFieldLength(&(analyzer->methodField), analyzer->methodLengthMatcher);
    */
    return 0;
}

int matchHTTPUri(FastParser * parser, const char * dataBegin, const char * dataEnd, bool isFinished)
{
  match_events++;
  //    printf("matchHTTPUri: ");
  //    printData(dataBegin, dataEnd);
  //    printf("\n");
    /*    
    HTTPAnalyzer * analyzer = (HTTPAnalyzer *)parser->getParam();
        
    if(isFinished == true)
    {
        char endCh = *(dataEnd - 1);
        if(endCh == ' ' || endCh == '\t' || endCh == '\r' || endCh == '\n')
        {
            analyzer->buffer->newData((UINT8_T *)dataBegin, dataEnd - dataBegin);
        
            analyzer->parseHttpUri(analyzer->buffer);
        }
        else
        {
            Vector<char> uriBuffer;
            uriBuffer.push_back(dataBegin, dataEnd - dataBegin);
            uriBuffer.push_back(' ');
            
            analyzer->buffer->newData((UINT8_T *)(uriBuffer.data()), uriBuffer.size());
                        
            analyzer->parseHttpUri(analyzer->buffer);
        }
    }
    */
    return 0;
}

int matchHTTPHeaderName(FastParser * parser, const char * dataBegin, const char * dataEnd, bool isFinished)
{
  match_events++;
  //    printf("matchHTTPHeaderName: ");
  //    printData(dataBegin, dataEnd);
  //    printf("\n");

    /*    
    HTTPAnalyzer * analyzer = (HTTPAnalyzer *)parser->getParam();
    
    if(analyzer->parseHttpHeaderNameField.parsingState == FINISHED)
    {
        analyzer->parseHttpHeaderNameField.reset();
        analyzer->parseHttpHeaderValueField.reset();
    }
    
    analyzer->parseHttpHeaderNameField.dataBegin = (UINT8_T *)dataBegin;
    analyzer->parseHttpHeaderNameField.dataEnd = (UINT8_T *)dataEnd;
    analyzer->parseHttpHeaderNameField.parsingState = INPROCESS;
    
    if(isFinished == true)
    {
        analyzer->parseHttpHeaderNameField.parsingState = FINISHED;
    }
    
    analyzer->matchFieldPair(&(analyzer->parseHttpHeaderNameField), &(analyzer->parseHttpHeaderValueField),
                   analyzer->headernameStringMatcher, &(analyzer->headerDictKeyData),
                   analyzer->headerStringGroupStructVector, analyzer->headerStringGroupMatcher,
                   analyzer->headerRegexGroupStructVector, analyzer->headerRegexGroupMatcher,
                   analyzer->headerLengthGroupStructVector, analyzer->headerLengthGroupMatcher);
    */
    return 0; 
}

int matchHTTPHeaderValue(FastParser * parser, const char * dataBegin, const char * dataEnd, bool isFinished)
{
  match_events++;
  //    printf("matchHTTPHeaderValue: ");
  //    printData(dataBegin, dataEnd);
  //    printf("\n");

    /*    
    if(parseOnly->count > 0)
    {
        return 0;
    }
    
    HTTPAnalyzer * analyzer = (HTTPAnalyzer *)parser->getParam();
    
    analyzer->parseHttpHeaderValueField.dataBegin = (UINT8_T *)dataBegin;
    analyzer->parseHttpHeaderValueField.dataEnd = (UINT8_T *)dataEnd;
    analyzer->parseHttpHeaderValueField.parsingState = INPROCESS;
    
    if(isFinished == true)
    {
        analyzer->parseHttpHeaderValueField.parsingState = FINISHED;
    }
    
    analyzer->matchFieldPair(&(analyzer->parseHttpHeaderNameField), &(analyzer->parseHttpHeaderValueField),
                   analyzer->headernameStringMatcher, &(analyzer->headerDictKeyData),
                   analyzer->headerStringGroupStructVector, analyzer->headerStringGroupMatcher,
                   analyzer->headerRegexGroupStructVector, analyzer->headerRegexGroupMatcher,
                   analyzer->headerLengthGroupStructVector, analyzer->headerLengthGroupMatcher);
    */    
    return 0;
}

}
