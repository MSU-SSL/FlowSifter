// This file is automatically generated from http.pac.

#ifndef http_pac_fast_h
#define http_pac_fast_h

#include <vector>
#include <iostream>

#ifdef WIN32
#include "binpac_win32.h"
#include "binpac_regex_win32.h"
#else
#include "binpac.h"
#include "binpac_regex.h"
#endif
using namespace std;

typedef unsigned char u_char;

#include <ctype.h>

typedef u_char* byte_vec;

namespace binpac {

class FastParser;
#include "http_matcher.h"
int strncasecmp(const char *s1, const char *s2, size_t n);
char *strcasestr(const char *s, const char *find);
enum ExpectBody {
	BODY_EXPECTED,
	BODY_NOT_EXPECTED,
	BODY_MAYBE,
};
enum DeliveryMode {
	UNKNOWN_DELIVERY_MODE,
	CONTENT_LENGTH,
	CHUNKED,
	MULTIPART,
};
ExpectBody expect_reply_body(int reply_status);
void extract_boundary(FastParser * t_fast_parser, const_bytestring const & value);

class Metadata{
public:
	Metadata(char* initname) {
		name = initname;
	}

	string name;
};

enum FieldType{
	TYPE1, 
	TYPE2, 
	NOT_USED,
};

class FastParser {
public:
	enum ParserStatus { NORMAL, INCOMPLETE_FIELD, BAD, PARSING_COMPLETE, REST_OF_FLOW};
	FastParser(SimpleFlowBuffer* buffer_, const_byteptr start_ = NULL, void* param_ = NULL) {
		//member variables in FlowDecl

		content_length_ = 0;
		delivery_mode_ = UNKNOWN_DELIVERY_MODE;
	
		this->flowbuffer = buffer_;
		this->startptr = start_;
		this->tablepointer = 0;
		this->status = NORMAL;
		this->field_length_left = 0;
		this->param = param_;
	}

	~FastParser() {
		delete flowbuffer;
		header_name_field.free();

		end_of_multipart_.free();
	
		if (param)	{
			delete param;
		}
	}

	void* getParam()	{
		return param;
	}
	inline void Reset()	{
		this->tablepointer = 0;
		this->status = NORMAL;
		this->startptr = flowbuffer->begin();
		this->content_length_ = 0;
		this->delivery_mode_ = UNKNOWN_DELIVERY_MODE;
		this->field_length_left = 0;
		this->flowbuffer->data_begin = this->flowbuffer->_buf;
		this->flowbuffer->orig_end = this->flowbuffer->_buf;
		this->flowbuffer->_size = 0;
	}
	int FuncParsingPDU();	//the function to parse one PDU
	void FuncParsingFlow();	//the function to parse one flow
	bool is_end_of_multipart(SimpleFlowBuffer * t_flow_buffer);
	//declaration of crucial functions
	static Metadata metadata[49];
	static FieldType fieldtype[49];
	
	//declaration of context variables
	bool is_orig;
	void * matchresult;
	ExpectBody expect_body;
	int stat_num;
	normal_bytestring header_name_field;
	bool process_header;
	int chunk_length;
	
	//declaration for context variables in FlowDecl declaration

		int content_length_;
		DeliveryMode delivery_mode_;
		bytestring end_of_multipart_;
	
	//declaration of parsing necessary variables
	SimpleFlowBuffer* flowbuffer;
	const_byteptr startptr;
	int field_length;
	int tablepointer;
	ParserStatus status;
	unsigned int field_length_left;	//this variable is used to handle incremental parsing within a field
	void* param;	//the variable asked by GX
};		//end declaration of past parser class

typedef FastParser *fast_parser_t;

class ConnParser {	
public:
	ConnParser()	{
		server = new FastParser(new SimpleFlowBuffer());
		client = new FastParser(new SimpleFlowBuffer());
	}

	~ConnParser()	{
		delete server;
		delete client;
	}

	fast_parser_t server;
	fast_parser_t client;
};

typedef ConnParser *conn_parser_t;

}  // namespace binpac
#endif /* http_pac_fast_h */
